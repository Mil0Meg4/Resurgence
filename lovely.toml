[manifest]
version = "1.0.0"
dump_lua = true
priority = 12

# Increase highlight limit for jokers
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{card_limit = self.GAME.starting_params.joker_slots, type = 'joker', highlight_limit = 1})"
position = "at"
payload = "{card_limit = self.GAME.starting_params.joker_slots, type = 'joker', highlight_limit = 100})"
match_indent = true

#copy unbound table
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "for _, k in ipairs(reset_keys) do"
position = "before"
payload = "self.ability.unbound = center.unbound --for aneyh vampirica's unbound jokers"

match_indent = true

#sans
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.blind_select then "
position = "after"
payload = '''
    local _tag = e.UIBox:get_UIE_by_ID('tag_container')
    G.GAME.skip_tag = _tag
'''
match_indent = true
times = 2

#Paint badge text color
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = 'badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))'
position = "before"
match_indent = true
payload = '''
local paint_key = RSGC.has_paint(card)
if paint_key and v == paint_key then
    badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v), SMODS.Stickers[paint_key].badge_text_colour)
else
'''
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = 'badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))'
position = "after"
match_indent = true
payload = "end"

#Make 42 give chips from joker and consumable area
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
    if card.ability.set == 'Enhanced' then
        local enhancement = card:calculate_enhancement(context)
        if enhancement then
            ret.enhancement = enhancement
        end
    end
'''
position = "before"
match_indent = true
payload = '''
if card.config.card then
    if context.joker_main then
        ret.playing_card_in_weird_places = {chips = card.base.nominal, card = card}
        SMODS.calculate_context({scoring_42 = true, blueprint_card = context.blueprint_card, other_card = card}, post_trig)
    end
end
'''

#ban ranks with deck
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if self.GAME.starting_params.no_faces and SMODS.Ranks[v.value].face then keep = false end"
position = 'after'
match_indent = true
payload = '''
if self.GAME.starting_params.rsgc_banned_ranks and self.GAME.starting_params.rsgc_banned_ranks[SMODS.Ranks[v.value].key] then keep = false end'''

#add more coloumns for ranks to deck view
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = '''local object = {n = G.UIT.ROOT, config = {align = "cm", colour = G.C.CLEAR}, nodes = {'''
position = "before"
payload = '''
if not Unjank then
    local max_shown = math.max(13,math.ceil(#rank_cols/3))
    local rank_col_1 = {}
    local rank_col_2 = {}
    local rank_col_3 = {}
    local a = #rank_cols + 1
    for i=1, #rank_cols do
        if i > max_shown*2 then 
            rank_col_3[a-i] = rank_cols[a-i]
        elseif i > max_shown then 
            rank_col_2[a-i] = rank_cols[a-i]
        else 
            rank_col_1[a-i] = rank_cols[a-i]
        end
    end

    rank_cols = {{n = G.UIT.C, config = {align = "cm"}, nodes = rank_col_1},
    {n = G.UIT.C, config = {align = "cm"}, nodes = rank_col_2},
    {n = G.UIT.C, config = {align = "cm"}, nodes = rank_col_3}}
end

'''
match_indent = true

#resurgence background color
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''--For the actual background colour'''
position = "after"
payload = '''if G.GAME.resurgence and not (state == G.STATES.TAROT_PACK or state == G.STATES.SPECTRAL_PACK 
or state == G.STATES.STANDARD_PACK or state == G.STATES.BUFFOON_PACK or state == G.STATES.PLANET_PACK) then
    ease_background_colour{new_colour = G.C.RED, special_colour = G.C.PURPLE, 0.2, contrast = 1.5}
    return
end'''
match_indent = true

#resurgence mode start
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if game_won and not G.GAME.win_notified then'''
position = "after"
payload = '''
if not G.GAME.resurgence and not G.GAME.resurgence_notified then 
    G.GAME.win_ante_old = G.GAME.win_ante
    G.GAME.win_ante = G.GAME.win_ante*2
    G.GAME.resurgence_notified = true
    G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        blocking = false,
        blockable = false,
        func = (function()
            if G.STATE == G.STATES.ROUND_EVAL then 
                RSGC.resurgence_start()
                G.GAME.resurgence = true
                G.GAME.won = false
                return true
            end
        end)
    }))
else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''for _,v in ipairs(SMODS.get_card_areas('playing_cards', 'end_of_round')) do'''
position = "before"
payload = '''
end
'''
match_indent = true


#makes long long jokers description actually visible inside the screen
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = '''local sign = 1'''
position = "before"
payload = '''
if self.config.center_key == "j_rsgc_long" then popup_direction = 'cl' end
'''
match_indent = true

